* build a web app from scratch with Rust and rocket

  i truly have no clue what i am doing, but, since you are here after all...
   
** preliminaries
   this document is a rustic "porting", of sorts, for [[https://blog.miguelgrinberg.com/post/about-me][Miguel Grinberg's]] [[https://courses.miguelgrinberg.com/p/flask-mega-tutorial][Flask Mega-Tutorial]]. in
   particular, i am using his idea of a "microblogging" platform and the steps he takes towards
   making that, but with rust. this guide wouldn't be a thing without it, and I highly recommend it
   for anyone interested in learning Python, Flask, and even web-dev generally (especially from a
   non-JS centric perspective). [[https://courses.miguelgrinberg.com/p/flask-mega-tutorial][buy his book here]].

   you don't need to be an expert at rust to use this guide, but having familiarity with it as a
   language is expected, i.e. i will not be explaining syntax or major ideas unique to the rust
   programming language between the materials of the book.

   finally, *this is very much a WIP*. /i will skip over explanations aggressively early on/. the goal
   is to make it through the meat of the material, write the bare minimum to keep track where my
   ported work is relative the book itself, and then come back to fill in the numerous holes and
   details left in the wake.

   aight, let's just get to it.

** TODO planned materials and topics

   as mentioned before, i am borrowing heavily from Gringberg's [[https://courses.miguelgrinberg.com/p/flask-mega-tutorial][Flask Mega-Tutorial]] in terms of
   material coverage. as of now, i am hoping to (roughly) cover the following:

   - [X] hello world
   - [X] templating
   - [ ] forms
     + [ ] deriving
     + [ ] csrf/cookies
     + [ ] input and routing
     + [ ] validation
   - [ ] databases
     + [ ] diesel
     + [ ] schemas
     + [ ] migrations
     + [ ] postgres/sqlite
   - [ ] user logins
     + [ ] tbd...
   - [ ] user accounts
     + [ ] tbd...
   - [ ] testing and error handling
     + [ ] tbd...
   - [ ] Pure.css and website styling
     + [ ] tbd...
   - [ ] ???

   the source code in this repository will always be ahead of the written material if you want to
   skip ahead and try to decipher what i'm doing.

** chapter 1: Hello, World!
   Not much to be done in this chapter, but, then again, so begins most major endeavors with
   software - bad and good alike.
*** Installing Rust

    It's as easy as [[https://rustup.rs/][rustup]]. For n*x systems, that looks like:
    #+BEGIN_SRC sh
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    #+END_SRC

    Rocket uses Nightly Rust due to its reliance on advanced macro and compiler features for its
    ergonomic API and ease-of-use. Thus, you'll want to run:

    #+BEGIN_SRC sh
    rustup install nightly
    #+END_SRC

    ... and to make nightly your default toolchain, you can also run:

    #+BEGIN_SRC sh
    rustup default nightly
    #+END_SRC

    Booyah, that's it. By installing rust with =rustup=, you also got access to things like =Cargo=, the
    rust package ('crates', as they're known) manager that also doubles as a build and project
    management tool. No weird virtual env problems, incompatibilities between the packaging tool and
    the project code itself, etc. It Just Works üòçü¶Äüòç

*** "Hello, World" App

    In the directory of your choice, run the following:

    #+BEGIN_SRC sh
    cargo new hermit
    #+END_SRC

    This will create a new sub-directory called =hermit=, initialized with the skeleton of a basic
    Rust binary (i.e. executable) project. The outline looks like:

    #+begin_src sh
    spook@haunt:~/code/lrn/rs/hermit

    üíÄ ‚Üõ  tree
    .
    ‚îú‚îÄ‚îÄ Cargo.toml
    ‚îî‚îÄ‚îÄ src
        ‚îî‚îÄ‚îÄ main.rs
    #+end_src

    Cargo.toml is the configuration file for the project as whole. You will list your dependencies
    in there along with other data, like authorship, akin to a =package.json= or =setup.py=
    file... sorta.

    =main.rs= is where all the action for a bin project lives. It's in here where, for small to moderate
    sized projects, at least, the actual program driver will exist.

    Go into =Cargo.toml= and put under the =[dependencies]= section:

    #+BEGIN_SRC toml
    [dependencies]
    rocket = "0.4.2"
    #+END_SRC

    Now in =main.rs=, put the following statements:

    #+BEGIN_SRC rust
      #![feature(proc_macro_hygiene, decl_macro)]
      #[macro_use]
      extern crate rocket;

      #[get("/")]
      fn index() -> &'static str {
          "hello, world!"
      }

      fn main() {
          rocket::ignite()
              .mount("/", routes![index])
              .launch();
      }
    #+END_SRC

    ... and once you run =cargo run=, you should see something like:

    #+BEGIN_SRC sh
      Finished dev [unoptimized + debuginfo] target(s) in 0.05s
      Running `target/debug/hermit`
      üîß Configured for development.
          => address: localhost
          => port: 8000
          => log: normal
          => workers: 16
          => secret key: generated
          => limits: forms = 32KiB
          => keep-alive: 5s
          => tls: disabled
      üõ∞  Mounting /:
          => GET / (index)
      üöÄ Rocket has launched from http://localhost:8000
    #+END_SRC

    Accessing the url [[http://localhost:8000]] should give you a friendly hello from Rocket! Congrats, you
    made your first rust web app (maybe! I don't know you!).

** chapter 2: templates
*** what are templates?

    templates are html pages that allow for "custom" content in that the templated pages, along with
    variables holding template values (like a user's name, age, etc), get fed into a template engine
    that parse and inject the variable values into the rendered page.

    with Rocket, the ability to use a templating engine is provided in the crate =rocket_contrib=,
    which contains various community developed utilities used by Rocket's end users. one such
    functionality is templating. let's start.

    update =Cargo.toml= to reflect the following:

    #+BEGIN_SRC toml
    [dependencies]
    rocket = "0.4.2"
    serde = "1.0"
    serde_derive = "1.0"
    serde_json = "1.0"

    [dependencies.rocket_contrib]
    version = "0.4.2"
    default-features = false
    features = ["tera_templates"]
    #+END_SRC

    we can now begin the process of making our little application feel more customized and
    dynamic. we will be using the [[https://tera.netlify.com/][Tera templating library]] by [[https://github.com/Keats][Vincent Prouillet]]. the following
    section will be fairly shallow with respect to learning templates, so please checkout the
    documentation for Tera directly to learn more than what is covered immediately below.

    from the project root, make a new subdirectory =templates/= and create the file =index.tera= with
    the following content:

    #+BEGIN_SRC html
      <html>
        <head>
          <title>Home Page - Hermitblog</title>
        </head>
        <body>
          <h1>Hello, {{ name }}!</h1>
        </body>
      </html>
    #+END_SRC

    your project should have the following structure now:

    #+BEGIN_SRC sh
    .
    ‚îú‚îÄ‚îÄ Cargo.lock
    ‚îú‚îÄ‚îÄ Cargo.toml
    ‚îú‚îÄ‚îÄ rust-toolchain
    ‚îú‚îÄ‚îÄ src
    ‚îÇ   ‚îî‚îÄ‚îÄ main.rs
    ‚îî‚îÄ‚îÄ templates
        ‚îî‚îÄ‚îÄ index.tera
    #+END_SRC

    Now, in main, pull in the following crates:

    #+BEGIN_SRC rust
      #[macro_use]
      extern crate serde_derive;

      use rocket_contrib::templates::Template;
    #+END_SRC

    Going back to our =index= route, let's now update it to be "dynamic" (bear with me, it will
    progress as we get further along) by adding the following changes:

    #+BEGIN_SRC rust
      #[get("/")]
      fn index() -> Template {
          let users = ["ghostface killah", "spook", "elias"];
          Template::render(
              "index",
              &TemplateContext {
                  name: users[0]
              })
      }
    #+END_SRC

    as it stands, this will not compile for a few reasons. bear with me for a moment for a small
    diversion.

    we've now changed the return type to =Template=, which is what our route returns to a request that
    matches on our root index route, =‚Å£"/"‚Å£=. We have an array users that I've filled with dummy data,
    and in our actual reply we render a template called =‚Å£"index"‚Å£=, which is that tera template we
    defined earlier, and then you'll notice we construct an object called =TemplateCtx= which has a
    single field, =name=. Let's look at that.
    
    
    before addressing templating, it might be worth briefly touching on =rocket_contrib= as a
    crate. Web programming has a lot of interrelated components such as handling cookies,
    templating, and database management; however, it's not necessarily a good thing to include the
    libraries that handle all of this in the core library of a web framework. consequentially,
    =Rocket= opts to package these libraries separately under the crate =rocket_contrib=, which
    altogether makeup "officially sanctioned" contributor libraries that achieve features as
    mentioned previously.

    for templating, then, we would want to use =rocket_contrib::tera_templates=. what exactly is
    involved when we want to use Rocket's templating facilities?

    1. enabling it

       you already saw this with the updated =Cargo.toml= snippet; we had to specifically enable this
       feature via the =features= attribute for the dependency. All features are disabled by default
       because of the effect it would otherwise have on compile times (8 or so dbs engines + 2
       templating engines!) along with keeping the dependency surface smaller, i.e. smaller
       binaries.

       hereon, for every additional feature we want out of =rocket_contrib=, we'll have to first
       enable it in the =Cargo.toml= listing.

    2. attach the =Fairing= to our rocket application

       a [[https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html][Fairing]] in Rocket is, in effect, a type of Middleware. in web apps, this translates to
       things such as templating, database handling, security mechanisms (CSRF, CORS, etc), and
       other concerns that often take place between Requests/Responses passed between the server and
       client.

       Adding a provided Fairing is trivial in Rocket:

       #+BEGIN_SRC rust
         fn main() {
             rocket::ignite()
                 .attach(Template::fairing())
                 .mount("/", routes![index])
                 .launch();
         }
       #+END_SRC

       this will now allow our templating fairing to handle requests/responses that involve
       templating logic!

    3. Templating itself

       this has a few components. First-off, you return the =Template= type on the route involved,
       obviously. we've already accomplished this much, but let's return back to that snippet:

       #+BEGIN_SRC rust
         #[get("/")]
         fn index() -> Template {
             let users = ["ghostface killah", "spook", "elias"];
             Template::render(
                 "index",
                 &TemplateContext {
                     name: users[0]
                 })
         }
       #+END_SRC

       so we see immediately that the return type has changed to =Template=, as it ought to, and in
       the body we mock the notion of users with an array of not-necessarily-random names. finally a
       call is made to =Template::render()=, where we pass two things:

       1) the name of the template to render through our engine

       2) a =Context= object, i.e. anything that implements the =Serialize= trait.

          For our current example, our =Context= object is defined as follows:

          #+BEGIN_SRC rust
            #[derive(Serialize)]
            pub struct TemplateContext {
                name: &'static str,
            }
          #+END_SRC

          where =Serialize= is a derivable trait provided by =serde_derive=, which also explains why i
          included that in our updated =Cargo.toml= and imports for =main.rs=. while =TemplateContext= is
          a trivial structure currently, it's important to note that by using a custom struct, as
          opposed to a =HashMap=, we will be allowed a lot more customization in the near future by
          simply adding extra fields that provide important information to our templating engine.

          finally, speaking of fields, note that =name=, being our only field, is what we are
          ultimately passing to the template. recall the template itself:

          #+BEGIN_SRC html
            <html>
                <head>
                    <title>Home Page - Hermitblog</title>
                </head>
                <body>
                    <h1>Hello, {{ name }}!</h1>
                </body>
            </html>
          #+END_SRC

          note the expression in our h1 tag, ={{ name }}=. this is a Tera Expression where =name= is a
          variable passed by the context of the templating engine!

          
    With the provided =TemplateContext= struct and updated =main.rs= function above, you should now be
    able to successfully execute =cargo run= and see the template at work. nice!

    a final note: try changing the variable =name= in =index.tera= to =foo=. after recompiling the
    project, visiting =localhost:8000= will lead to a 500 error as Rocket will fail to find any
    variable named =foo= provided to the template. keep this in mind when defining your contexts and
    templates.

*** conditional statements
    
    template engines typically allow for various control-flow structures that you would find in
    programming languages, and conditionals are a staple in templating languages. before that, let's
    change our =TemplateContext= struct once more as follows:

    #+BEGIN_SRC rust
      #[derive(Serialize)]
      pub struct TemplateContext {
          name: &'static str,
          title: &'static str,
      }
    #+END_SRC

    so now we have a =title= field, which will denote a specific title for our given page, if such a
    title is desired/exists; however, we want to be able to still render some kind of title even
    when the field =title= itself is empty. we can achieve exactly this with an update to our
    =index.html.tera=:

    #+BEGIN_SRC html
      <html>
        <head>
          {% if title %}
             <title>{{ title }} - Hermitblog</title>
          {% else %}
             <title>Welcome to Hermitblog</title>
          {% endif %}
        </head>
        <body>
          <h1>Hello, {{ name }}!</h1>
        </body>
      </html>
    #+END_SRC

    if =title= is some value other than =‚Å£""‚Å£=, then the first if-condition returns true, and we get:

    #+BEGIN_SRC html
      <title>{{ title }} - Hermitblog</title>
    #+END_SRC

    rendered. however, if we pass an empty string for title, then:

    #+BEGIN_SRC html
      <title>Welcome to Hermitblog</title>
    #+END_SRC
    
    gets rendered. dynamic!

    to see this work in action, simply update our =index= route as follows:

    #+BEGIN_SRC rust
      #[get("/")]
      fn index() -> Template {
          let users = ["ghostface killah", "spook", "elias"];
          Template::render(
              "index",
              &TemplateContext {
                  name: users[0],
                  title: "home"
              })
      }
    #+END_SRC

*** loops
    
    like if-conditions, loops are yet another feature found in most templating engines. let's make
    some fake blogposts as dummy data and try to implement the templating necessary for enumering
    such blogposts. update the route as follows:

    #+BEGIN_SRC rust
      #[get("/")]
      fn index() -> Template {
          let users = ["ghostface killah", "spook", "elias"];
          let ghost_posts = vec![
              Post {
                  body: r"
      Listen, you could never match my velocity
      Too much stamina, glitter in front of cameras
      On the red carpet, still clean your clock like a janitor",
              },
              Post {
                  body: r"
      That night, yo, I was hittin' like a spiked bat
      And then you thought I was bugged out, and crazy
      Strapped for nonsense, after me became lazy
      Yo, nobody budge while I shot slugs
      Never shot thugs, I'm runnin' with thugs that flood mugs",
              },        
          ];
          Template::render(
              "index",
              &TemplateContext {
                  name: users[0],
                  title: "home",
                  posts: ghost_posts,
              })
      }
    #+END_SRC

    Yo, ghostface got bars but don't get distracted: note that i've added a new type for our dummy
    data, called =Post=. I've defined that as follows:

    #+BEGIN_SRC rust
      #[derive(Serialize)]
      pub struct Post {
          body: &'static str,
      }    
    #+END_SRC

    now, what we want to happen is that upon loading index, a user sees their posts listed on their
    home page. to do that, we need to iterate over the contents of our vector and thankfully Tera
    makes that a trivial task. update =index.html.tera= as follows:

    #+BEGIN_SRC html
      <html>
          <head>
              {% if title %}
              <title>{{ title }} - Hermitblog</title>
              {% else %}
              <title>Welcome to Hermitblog</title>
              {% endif %}
          </head>
          <body>
              <h1>Hello, {{ name }}!</h1>
              {% for post in posts %}
              <div>
                  <p>{{ name }} says: {{ post.body }}</p>
              </div>
              {% endfor %}
          </body>
      </html>
    #+END_SRC

    nifty! notice how the syntax for iterating over the contents of the vector is nearly identical
    to that found it rust proper and, furthermore, that we access the inner content of our posts
    using dot notation... just like rust! nice!


